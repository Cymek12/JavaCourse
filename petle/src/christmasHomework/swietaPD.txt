1. Napisz program, który symuluje grę w statki na planszy 5x5, pozwalając użytkownikowi na oddawanie strzałów.
2. Choinka z gwiazdek
3. Napisz metodę utworzPlik, która próbuje utworzyć plik o podanej nazwie. Jeśli operacja się powiedzie, metoda zwraca true, w przeciwnym razie false.
4. Napisz program, który sprawdza, czy wprowadzone przez użytkownika hasło zawiera unikalne znaki.
5. Zdefiniuj własny wyjątek UnsupportedFileFormatException, który zostanie rzucony, gdy próbujesz otworzyć plik w nieobsługiwanym formacie.
6. Napisz metodę otworzPlik(String nazwaPliku), która rzuca ten wyjątek.
7. Napisz program, który tworzy listę użytkowników, z których każdy ma listę ról, i używa metody flatMap(), aby uzyskać listę wszystkich unikalnych ról.
8. Napisz program, który tworzy listę miast i ich populacji, a następnie tworzy Mapę z miastami o populacji powyżej 1 miliona.

9.
------------------------------------------------------------------------------------------------------------------------
Modelowanie Danych z Polimorfizmem:
        Klasa Abstrakcyjna Product:
            Pola:
                String name
                String category
                double price
                double rating
                boolean inStock
                Optional<String> manufacturer
            Metoda abstrakcyjna:
                String getSpecificDetails()
        Klasy Konkretne:
            Electronics
                Dodatkowe pole: int warrantyPeriod (w miesiącach)
            Appliance
                Dodatkowe pole: String energyClass
            Book
                Dodatkowe pole: String author

    Definicja Interfejsów Funkcyjnych:
        Stwórz klasę FunctionalInterfaces zawierającą:
            Predicate<Product> isAvailableAndCheap – filtruje produkty dostępne i tańsze niż 1000 zł.
            Predicate<Product> isElectronics – filtruje produkty z kategorii "Elektronika".
            Function<Product, String> productToString – mapuje produkt na formatowany String: "nazwa (cena: X zł, producent: Y)".
            Consumer<String> printString – wypisuje String na konsolę.

    Implementacja Klasy Serwisowej ProductService:
        Stwórz klasę ProductService z metodami:
            List<Product> filterProducts(List<Product> products, Predicate<Product> predicate) – filtruje produkty na podstawie predykatu.
            <R> List<R> mapProducts(List<Product> products, Function<Product, R> mapper) – mapuje produkty na inny typ danych.
            void forEachProduct(List<R> data, Consumer<R> consumer) – wykonuje akcję na każdym elemencie listy.
            Optional<Product> findBestRatedProduct(List<Product> products, String category) – znajduje produkt o najwyższej ocenie w danej kategorii.
            OptionalDouble calculateAveragePrice(List<Product> products, String category) – oblicza średnią cenę produktów w danej kategorii.
            Map<String, List<Product>> groupProductsByCategory(List<Product> products) – grupuje produkty według kategorii.
            Map<String, long[]> countProductsWithAndWithoutManufacturer(List<Product> products) – zlicza produkty z i bez producenta w każdej kategorii.
            Metody Specyficzne dla Podklas:
                List<Electronics> getElectronicsWithWarranty(List<Product> products, int minWarranty) – pobiera elektronikę z minimalnym okresem gwarancji.
                List<Book> getBooksByAuthor(List<Product> products, String author) – pobiera książki danego autora.

    Implementacja Klasy pierwszeZadanie.Main:
        Stwórz klasę pierwszeZadanie.Main i wykonaj następujące operacje korzystając z ProductService:
            Filtracja i Mapowanie:
                Przefiltruj produkty dostępne i tańsze niż 1000 zł.
            Wyszukiwanie Najlepszego Produktu w Kategorii "Elektronika":
            Obliczanie Średniej Ceny w Kategorii "AGD":
            Grupowanie Produktów według Kategorii:
            Łączenie Predykatów:
                Przefiltruj produkty dostępne, tańsze niż 1000 zł oraz z kategorii "Elektronika".
            Znalezienie Produktu w Nieistniejącej Kategorii:
                Spróbuj znaleźć najlepszego ocenianego produktu w kategorii "Komputery".
            Specyficzne Operacje z Polimorfizmem:
                Pobierz elektronikę z minimalnym okresem gwarancji i wypisz ich szczegóły.
                Pobierz książki danego autora i wypisz ich szczegóły.

Wymagania:

    Użycie Stream API:
    Wszystkie operacje przetwarzania danych powinny wykorzystywać Stream API.

    Obsługa Optional:
    Korzystaj z Optional i OptionalDouble do bezpiecznego obchodzenia się z potencjalnie brakującymi wartościami.

    Polimorfizm:
    Wykorzystaj dziedziczenie i polimorfizm, tworząc hierarchię klas Product oraz implementując specyficzne operacje dla różnych typów produktów.

    Zasada Separation of Concerns:
    Logikę przetwarzania danych umieść w klasie ProductService, a klasa pierwszeZadanie.Main powinna jedynie inicjalizować dane i wywoływać odpowiednie metody serwisu.

    Czytelność i Utrzymanie:
    Kod powinien być przejrzysty, z odpowiednimi komentarzami i zgodny z konwencjami kodowania w Javie.


public class ProductData {
    public static List<Product> getProducts() {
        return Arrays.asList(
                // Elektronika
                new Electronics("Laptop Lenovo", 3000.00, 4.5, true, Optional.of("Lenovo"), 24),
                new Electronics("Smartphone Samsung", 1500.00, 4.2, true, Optional.of("Samsung"), 12),
                new Electronics("Smartphone Xiaomi", 999.99, 4.0, false, Optional.empty(), 12),
                new Electronics("Telewizor Sony", 4000.00, 4.7, true, Optional.of("Sony"), 36),
                new Electronics("Laptop Dell", 2800.00, 4.4, true, Optional.of("Dell"), 24),

                // AGD
                new Appliance("Suszarka do włosów Philips", 200.00, 4.1, true, Optional.of("Philips"), "A++"),
                new Appliance("Mikser Bosch", 250.00, 4.3, true, Optional.of("Bosch"), "A+"),
                new Appliance("Odkurzacz Dyson", 1200.00, 4.6, false, Optional.of("Dyson"), "A++"),

                // Książki
                new Book("Książka Java 11", 89.99, 4.8, true, Optional.empty(), "John Doe"),
                new Book("Książka Algorytmy", 120.00, 4.5, false, Optional.empty(), "Jane Smith")
        );
    }
}

------------------------------------------------------------------------------------------------------------------------


10.
Utwórz klasę Rachunek reprezentującą rachunki bankowe. Klasa Rachunek definiuje:

a) pole typu Osoba opisujące właściciela rachunku, pole typu double opisujące stan rachunku bankowego. Osoba jest klasą z jednego z poprzednich zadań,

b) konstruktor inicjujący właściciela i stan rachunku,

c) metody:

- boolean wplata(double) - operacja wpłaty podanej kwoty, zwracająca true w przypadku sukcesu operacji, false w przeciwnym przypadku,
- boolean wyplata(double) - operacja wypłaty podanej kwoty, zwracająca true w przypadku sukcesu operacji, false w przeciwnym przypadku
(np. kiedy na rachunku jest za mało środków),
- boolean przelew(Rachunek, double) - operacja przelewu podanej kwoty z rachunku na podany (jako argument metody) rachunek, zwracająca
true w przypadku sukcesu operacji, false w przeciwnym przypadku,
- void aktualizacja() - wyświetlająca komunikat: "Rachunek podstawowy".
- public String toString() - zawierająca informacje o rachunku w postaci obiektu typu String.

Utwórz klasę Konto, dziedziczącą po klasie Rachunek, reprezentującą konta bankowe. Dodatkowo,
klasa Konto posiada pole statyczne typu double opisujące oprocentowanie oraz metodę statyczną void zmienOprocentowanie(double) go zmieniającą.
Wszystkie konta klasy Konto mają wspólne oprocentowanie. Klasa Konto przedefiniowuje następujące metody (z klasy Rachunek): aktualizacja()
- aktualizującą stan konta po doliczeniu odsetek na podstawie bieżącego oprocentowania oraz toString(...).

Utwórz klasę KontoVIP, dziedziczącą po klasie Konto, reprezentującą konta bankowe z dodatkowymi przywilejami.
Dodatkowo, klasa KontoVIP posiada pola opisujące indywidualne oprocentowanie oraz limit debetu
(tj. najmniejsza ujemna wartość, jaką może mieć stan konta).
Dopisz konstruktor inicjujący właściciela, stan konta, oprocentowanie oraz limit debetu.
Klasa KontoVIP przedefiniowuje następujące metody (z klas Rachunek/Konto): wypłata(...), przelew(...), aktualizacja(), toString(...).

Utwórz tablicę przechowującą obiekty klasy Rachunek i wypełnij ją wszystkimi rodzajami rachunków/kont bankowych.
Następnie wykonaj operacje: wpłata, wypłata, przelew, zmiana oprocentowania, ... za pomocą odpowiednich metod.
Na koniec aktualizuj i wyświetl wszystkie informacje o rachunkach/kontach za pomocą metod aktualizacja() i toString().